Below is a thorough, step-by-step guide that you can hand to another AI or developer so they can implement a mobile-first web app with the rear camera (environment-facing camera) enabled, with virtually no guesswork needed. Everything is spelled out in detail.

---

## 1. Overview of What We’re Building

- A minimal web application that:
  1. Runs under HTTPS (required by all modern mobile browsers for camera access).
  2. Displays a live video feed from the **rear (environment-facing) camera** of a mobile device.
  3. Provides basic error handling for situations like permission denial or unsupported browsers.

## 2. Tools Required

1. **Node.js** (version 14 or higher).  
   - If not installed, visit [nodejs.org](https://nodejs.org/) and install the LTS version.

2. **NPM** (Node Package Manager) – installed by default with Node.js.

3. **Vite** (a modern bundler/dev server).  
   - We’ll install it locally inside our project so that your developer or LLM can run commands without extra global setup.

4. **(Optional) mkcert or ngrok** to serve the site over HTTPS locally.
   - If you can’t do local HTTPS, you can still test “unsecured” on desktop, but for real mobile testing, a secure (HTTPS) environment is mandatory.
   - The easiest way: use **ngrok** to tunnel your local server over HTTPS.

---

## 3. Step-by-Step Project Setup

> **All terminal commands** below are run inside your project folder. If you’re using Windows, open **Command Prompt** or **PowerShell**. On macOS or Linux, use **Terminal**.  

### 3.1 Create a New Project Folder

1. Choose or create an empty folder for your project. For example:
   ```bash
   mkdir rear-camera-app
   cd rear-camera-app
   ```
2. Initialize an empty NPM project:
   ```bash
   npm init -y
   ```
   - This command creates a `package.json` file with default settings.

### 3.2 Install Vite Locally

1. Install Vite as a development dependency:
   ```bash
   npm install --save-dev vite
   ```
2. (Optional) If you want a super minimal setup, you can also install TypeScript, but it’s not required for this basic example.

### 3.3 Add Build and Dev Commands to package.json

1. Open the generated `package.json` file in any text editor.
2. In the `"scripts"` section, add two lines for `dev` and `build`, like so:
   ```json
   {
     "name": "rear-camera-app",
     "version": "1.0.0",
     "scripts": {
       "dev": "vite",
       "build": "vite build"
     },
     "devDependencies": {
       "vite": "^4.0.0"
     }
   }
   ```
3. Save and close `package.json`.

### 3.4 Create the Source Files

1. Create an `index.html` file (in the root of your project folder, next to `package.json`).  
   - **File:** `index.html`  
   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
     <meta charset="UTF-8" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>Mobile Rear Camera Demo</title>
   </head>
   <body>
     <h1>Rear Camera Preview</h1>
     <video id="cameraPreview" autoplay playsinline style="width: 100%; max-width: 600px;"></video>
   
     <!-- Include our JavaScript code -->
     <script type="module" src="main.js"></script>
   </body>
   </html>
   ```

2. Create a `main.js` file (in the same folder).  
   - **File:** `main.js`  
   ```js
   // Get a reference to the <video> element
   const videoElement = document.getElementById('cameraPreview');
   
   async function startRearCamera() {
     try {
       // Attempt to access the environment (rear) camera
       const stream = await navigator.mediaDevices.getUserMedia({
         video: { facingMode: { exact: 'environment' } },
         audio: false
       });
       
       // If successful, set the video source to the stream
       videoElement.srcObject = stream;
     } catch (error) {
       // Provide a more detailed error log in real apps
       console.error('Error accessing camera:', error);
       // You might show a user-friendly message here, like:
       // alert('Could not access the rear camera. Check your permissions or try a different browser.');
     }
   }
   
   // Check if the browser supports media devices and the getUserMedia API
   if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
     startRearCamera();
   } else {
     console.error('getUserMedia not supported by this browser.');
     // In a real UI, you’d show an alert or message to the user.
   }
   ```

3. Your project structure now should look like this:
   ```
   rear-camera-app/
   ├─ package.json
   ├─ index.html
   ├─ main.js
   └─ node_modules/ (created after npm install)
   ```

---

## 4. Running the App Locally (HTTP or HTTPS)

### 4.1 Start a Local Dev Server (HTTP Only)

1. In your project folder, run:
   ```bash
   npm run dev
   ```
2. Vite will show you something like:
   ```
   VITE v4.x.x  ready in x ms
   > Local:   http://127.0.0.1:5173/
   > Network: use --host to expose
   ```
3. Open the given URL (e.g., `http://127.0.0.1:5173/`) in your desktop browser.  
   - You’ll see the page with a `<video>` element.  
   - On desktop with a single webcam, it might ask for permission.  
   - **Note:** If you’re purely on desktop, the rear camera constraint might not do much.  

### 4.2 Test on a Mobile Device Over the Same LAN (Optional, Still HTTP)

1. If your computer and phone are on the same Wi-Fi network:
   - Run `npm run dev -- --host 0.0.0.0` (or `vite --host`).
   - Vite’s console will show a “Network” URL like `http://192.168.x.x:5173`.
2. On your phone’s browser, enter that `http://192.168.x.x:5173` address.  
   - **Disclaimer**: Because this is still HTTP (not HTTPS), some mobile browsers (especially iOS Safari) might block camera usage by default. Some Android browsers might allow it, but it’s inconsistent.  

### 4.3 Serve via HTTPS Locally (Recommended for Reliable Testing)

Because modern mobile devices often **require** HTTPS to grant camera access, do one of these:

**Option A: Use ngrok**  
1. Install ngrok (visit [ngrok.com](https://ngrok.com/) and follow instructions).  
2. In a separate terminal window, run:
   ```bash
   ngrok http 5173
   ```
3. ngrok will generate a forwarding URL like `https://abc123.ngrok.io`.  
4. Open that `https://abc123.ngrok.io` link on your phone.  
   - Camera prompts should appear properly since it’s fully HTTPS.  

**Option B: Use mkcert**  
1. Install mkcert (check [GitHub repository](https://github.com/FiloSottile/mkcert) for instructions).  
2. In your project folder, generate a local certificate:
   ```bash
   mkcert localhost
   ```
   This creates `localhost.pem` and `localhost-key.pem` (names might vary).  
3. Configure Vite to use these certificates. For example, create a `vite.config.js`:

   ```js
   import { defineConfig } from 'vite';

   export default defineConfig({
     server: {
       https: {
         key: 'localhost-key.pem',
         cert: 'localhost.pem'
       },
       host: 'localhost',
       port: 5173
     }
   });
   ```
4. Run `npm run dev`. Now your local dev server is at `https://localhost:5173`.  
   - Your browser might warn about “untrusted certificate” unless you add it to your system’s trust store. Follow mkcert’s docs to fix that warning.

---

## 5. Cross-Browser and Cross-Device Considerations

1. **iOS Safari** often needs:
   - A direct user action (like tapping a button) before the camera starts.  
   - An actual HTTPS connection (not self-signed) unless you trust the cert.  

2. **Android Chrome** typically accepts self-signed certificates if you manually trust them, but it’s smoother with an ngrok or real SSL certificate.

3. **facingMode exact** can fail on older browsers or devices that only have a front camera. In real applications:
   - Catch the error and try `facingMode: 'user'` or `video: true` as a fallback.

4. **Permission Handling**:
   - If users deny permission, you’ll get an error. Consider prompting them again or providing instructions for enabling it in browser settings.

5. **Orientation Handling**:
   - If you rotate the phone, the video feed may look sideways. You can use CSS or JavaScript to adapt to orientation changes. This can get pretty advanced, but for a simple MVP, you may ignore it or ask the user to hold their phone in a certain orientation.

---

## 6. Building for Production

1. When you’re ready to deploy, run:
   ```bash
   npm run build
   ```
2. This generates a `dist/` folder with optimized assets (HTML, JS, etc.).
3. Upload the contents of `dist/` to any HTTPS-capable hosting service, such as:
   - Netlify
   - Vercel
   - AWS S3 + CloudFront (with SSL configured)
   - Any other hosting that supports HTTPS

4. Once deployed, open the production URL on your phone’s browser (e.g., `https://example.com`) and you should see the live camera preview.

---

## 7. Final Notes

- **No Guesswork**: By following the exact commands above, another LLM or developer can replicate these steps precisely, with no missing details.
- **Security**: Always use HTTPS in production. Camera usage is restricted to secure contexts in most browsers.
- **Error Handling**: In a real-world app, you’ll want more robust error messages, fallback logic, and a friendlier UI. But the code here is enough to prove that an environment-facing camera is possible on mobile web.

---

### That’s it!
By following every bullet point here, you’ll get a **mobile-first web app** that accesses the **rear camera** via `getUserMedia`. Once it’s running under HTTPS, the phone’s browser will prompt for permission, and you’ll see the environment-facing camera feed. 

Feel free to copy all of this into any system that needs step-by-step instructions. If you need further clarifications on any step, just let me know!